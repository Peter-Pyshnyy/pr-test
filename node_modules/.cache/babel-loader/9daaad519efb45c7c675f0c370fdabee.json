{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Petya\\\\Desktop\\\\proging\\\\webdev\\\\rct\\\\aviation\\\\src\\\\components\\\\TicketList.js\";\nimport React from \"react\";\nimport \"./component-styles/card.css\";\nimport FlightTicket from \"./FlightTicket\";\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TicketList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      ticket: null,\n      displayed: 0,\n      sortType: 0\n    };\n  }\n\n  async componentDidMount() {\n    let arr = [];\n    let sortedArr = [];\n    const res = await fetch(\"json/tickets.json\");\n    const data = await res.json();\n    sortedArr = sort(this.state.sortType, data);\n\n    for (let i = this.state.displayed; i < 100; i++) {\n      arr.push(sortedArr[i]);\n      this.setState({\n        displayed: i\n      });\n    }\n\n    this.setState({\n      ticket: arr,\n      loading: false\n    });\n    durationSort(data[0], data[1]); // sortedArr.map((e) => {\n    //   checkDur(e);\n    // });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.loading || !this.state.ticket ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.ticket.map(e => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(FlightTicket, {\n                ticket: e\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this)\n            }, e.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction sort(type, data) {\n  let arr = data;\n\n  switch (type) {\n    case 0:\n      arr.sort(priceSort);\n      break;\n\n    case 1:\n      arr.sort(durationSort);\n      break;\n\n    default:\n      return arr;\n  }\n\n  return arr;\n}\n\nconst priceSort = (a, b) => {\n  return a.price - b.price;\n};\n\nconst checkDur = async e => {\n  const segmentA = await getSegments(e);\n  let durationA = 0;\n  await segmentA.map(e => durationA += e.duration);\n  console.log(durationA);\n};\n\nconst durationSort = async (a, b) => {\n  const segmentA = await getSegments(a);\n  const segmentB = await getSegments(b);\n  let durationA = 0;\n  await segmentA.map(e => durationA += e.duration);\n  let durationB = 0;\n  await segmentB.map(e => durationB += e.duration);\n  console.log(durationA + \" and \" + durationB);\n  return durationA - durationB;\n};\n\nconst getSegments = async ticket => {\n  let segments = [];\n  let segmentsAmount = ticket.segments.length;\n  const res = await fetch(\"json/segments.json\");\n  const data = await res.json();\n  data.map(segment => {\n    let found = false;\n\n    for (let i = 0; i < segmentsAmount; i++) {\n      found = ticket.segments[i] == segment.id;\n      if (found) segments.push(segment);\n    }\n  });\n  return segments;\n};","map":{"version":3,"sources":["C:/Users/Petya/Desktop/proging/webdev/rct/aviation/src/components/TicketList.js"],"names":["React","FlightTicket","useEffect","useState","TicketList","Component","state","loading","ticket","displayed","sortType","componentDidMount","arr","sortedArr","res","fetch","data","json","sort","i","push","setState","durationSort","render","map","e","id","type","priceSort","a","b","price","checkDur","segmentA","getSegments","durationA","duration","console","log","segmentB","durationB","segments","segmentsAmount","length","segment","found"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./component-styles/card.css\";\r\nimport FlightTicket from \"./FlightTicket\";\r\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\r\n\r\nexport default class TicketList extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    ticket: null,\r\n    displayed: 0,\r\n    sortType: 0,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let arr = [];\r\n    let sortedArr = [];\r\n    const res = await fetch(\"json/tickets.json\");\r\n    const data = await res.json();\r\n    sortedArr = sort(this.state.sortType, data);\r\n\r\n    for (let i = this.state.displayed; i < 100; i++) {\r\n      arr.push(sortedArr[i]);\r\n      this.setState({ displayed: i });\r\n    }\r\n    this.setState({ ticket: arr, loading: false });\r\n\r\n    durationSort(data[0], data[1]);\r\n\r\n    // sortedArr.map((e) => {\r\n    //   checkDur(e);\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading || !this.state.ticket ? (\r\n          <div>Загрузка...</div>\r\n        ) : (\r\n          <div>\r\n            <ul>\r\n              {this.state.ticket.map((e) => {\r\n                return (\r\n                  <li key={e.id}>\r\n                    <FlightTicket ticket={e} />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction sort(type, data) {\r\n  let arr = data;\r\n\r\n  switch (type) {\r\n    case 0:\r\n      arr.sort(priceSort);\r\n      break;\r\n    case 1:\r\n      arr.sort(durationSort);\r\n      break;\r\n    default:\r\n      return arr;\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nconst priceSort = (a, b) => {\r\n  return a.price - b.price;\r\n};\r\n\r\nconst checkDur = async (e) => {\r\n  const segmentA = await getSegments(e);\r\n\r\n  let durationA = 0;\r\n  await segmentA.map((e) => (durationA += e.duration));\r\n\r\n  console.log(durationA);\r\n};\r\n\r\nconst durationSort = async (a, b) => {\r\n  const segmentA = await getSegments(a);\r\n  const segmentB = await getSegments(b);\r\n\r\n  let durationA = 0;\r\n  await segmentA.map((e) => (durationA += e.duration));\r\n\r\n  let durationB = 0;\r\n  await segmentB.map((e) => (durationB += e.duration));\r\n\r\n  console.log(durationA + \" and \" + durationB);\r\n\r\n  return durationA - durationB;\r\n};\r\n\r\nconst getSegments = async (ticket) => {\r\n  let segments = [];\r\n  let segmentsAmount = ticket.segments.length;\r\n  const res = await fetch(\"json/segments.json\");\r\n  const data = await res.json();\r\n\r\n  data.map((segment) => {\r\n    let found = false;\r\n    for (let i = 0; i < segmentsAmount; i++) {\r\n      found = ticket.segments[i] == segment.id;\r\n\r\n      if (found) segments.push(segment);\r\n    }\r\n  });\r\n\r\n  return segments;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}