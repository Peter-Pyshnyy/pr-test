{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Petya\\\\Desktop\\\\proging\\\\webdev\\\\rct\\\\aviation\\\\src\\\\components\\\\TicketList.js\";\nimport React from \"react\";\nimport \"./component-styles/card.css\";\nimport FlightTicket from \"./FlightTicket\";\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TicketList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      ticket: null,\n      displayed: 0,\n      sortType: 1\n    };\n\n    this.changeSortType = type => {\n      this.setState({\n        sortType: type\n      });\n      this.updateList();\n    };\n\n    this.updateList = async () => {\n      let arr = [];\n      let sortedArr = [];\n      const res = await fetch(\"json/tickets.json\");\n      const data = await res.json();\n      sortedArr = await sort(this.state.sortType, data);\n\n      for (let i = this.state.displayed; i < 5; i++) {\n        arr.push(sortedArr[i]);\n        this.setState({\n          displayed: i\n        });\n      }\n\n      this.setState({\n        ticket: arr,\n        loading: false\n      });\n    };\n  }\n\n  async componentDidMount() {\n    this.updateList(); // const res = await fetch(\"json/tickets.json\");\n    // const data = await res.json();\n    // sortedArr = await sort(this.state.sortType, data);\n    // for (let i = this.state.displayed; i < 5; i++) {\n    //   arr.push(sortedArr[i]);\n    //   this.setState({ displayed: i });\n    // }\n    // this.setState({ ticket: arr, loading: false });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.loading || !this.state.ticket ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.ticket.map(e => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(FlightTicket, {\n                ticket: e\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this)\n            }, e.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nasync function sort(type, data) {\n  let arr = data;\n\n  switch (type) {\n    case 0:\n      arr.sort(priceSort);\n      break;\n\n    case 1:\n      arr.sort(durationSort);\n      break;\n\n    case 2:\n      arr.sort(optimalSort);\n      break;\n\n    default:\n      return arr;\n  }\n\n  console.log(arr);\n  return await arr;\n}\n\nconst priceSort = (a, b) => {\n  return a.price - b.price;\n}; // const checkDur = async (e) => {\n//   const segmentA = await getSegments(e);\n//   let durationA = 0;\n//   await segmentA.map((e) => (durationA += e.duration));\n//   console.log(durationA);\n// };\n\n\nconst durationSort = async (a, b) => {\n  const segmentA = await getSegments(a);\n  const segmentB = await getSegments(b);\n  let durationA = 0;\n  await segmentA.map(e => durationA += e.duration);\n  let durationB = 0;\n  await segmentB.map(e => durationB += e.duration);\n  return durationA - durationB;\n};\n\nconst optimalSort = async (a, b) => {\n  const segmentA = await getSegments(a);\n  const segmentB = await getSegments(b);\n  let stopsA = 0;\n  await segmentA.map(e => stopsA += e.stops.length);\n  let stopsB = 0;\n  await segmentB.map(e => stopsB += e.stops.length);\n  return stopsA - stopsB;\n};\n\nconst getSegments = async ticket => {\n  let segments = [];\n  let segmentsAmount = ticket.segments.length;\n  const res = await fetch(\"json/segments.json\");\n  const data = await res.json();\n  data.map(segment => {\n    let found = false;\n\n    for (let i = 0; i < segmentsAmount; i++) {\n      found = ticket.segments[i] == segment.id;\n      if (found) segments.push(segment);\n    }\n  });\n  return segments;\n};","map":{"version":3,"sources":["C:/Users/Petya/Desktop/proging/webdev/rct/aviation/src/components/TicketList.js"],"names":["React","FlightTicket","useEffect","useState","TicketList","Component","state","loading","ticket","displayed","sortType","changeSortType","type","setState","updateList","arr","sortedArr","res","fetch","data","json","sort","i","push","componentDidMount","render","map","e","id","priceSort","durationSort","optimalSort","console","log","a","b","price","segmentA","getSegments","segmentB","durationA","duration","durationB","stopsA","stops","length","stopsB","segments","segmentsAmount","segment","found"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./component-styles/card.css\";\r\nimport FlightTicket from \"./FlightTicket\";\r\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\r\n\r\nexport default class TicketList extends React.Component {\r\n  state = {\r\n    loading: true,\r\n    ticket: null,\r\n    displayed: 0,\r\n    sortType: 1,\r\n  };\r\n\r\n  changeSortType = (type) => {\r\n    this.setState({ sortType: type });\r\n    this.updateList();\r\n  };\r\n\r\n  updateList = async () => {\r\n    let arr = [];\r\n    let sortedArr = [];\r\n\r\n    const res = await fetch(\"json/tickets.json\");\r\n    const data = await res.json();\r\n    sortedArr = await sort(this.state.sortType, data);\r\n\r\n    for (let i = this.state.displayed; i < 5; i++) {\r\n      arr.push(sortedArr[i]);\r\n      this.setState({ displayed: i });\r\n    }\r\n    this.setState({ ticket: arr, loading: false });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.updateList();\r\n\r\n    // const res = await fetch(\"json/tickets.json\");\r\n    // const data = await res.json();\r\n    // sortedArr = await sort(this.state.sortType, data);\r\n\r\n    // for (let i = this.state.displayed; i < 5; i++) {\r\n    //   arr.push(sortedArr[i]);\r\n    //   this.setState({ displayed: i });\r\n    // }\r\n    // this.setState({ ticket: arr, loading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.loading || !this.state.ticket ? (\r\n          <div>Загрузка...</div>\r\n        ) : (\r\n          <div>\r\n            <ul>\r\n              {this.state.ticket.map((e) => {\r\n                return (\r\n                  <li key={e.id}>\r\n                    <FlightTicket ticket={e} />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nasync function sort(type, data) {\r\n  let arr = data;\r\n\r\n  switch (type) {\r\n    case 0:\r\n      arr.sort(priceSort);\r\n      break;\r\n    case 1:\r\n      arr.sort(durationSort);\r\n      break;\r\n    case 2:\r\n      arr.sort(optimalSort);\r\n      break;\r\n    default:\r\n      return arr;\r\n  }\r\n\r\n  console.log(arr);\r\n  return await arr;\r\n}\r\n\r\nconst priceSort = (a, b) => {\r\n  return a.price - b.price;\r\n};\r\n\r\n// const checkDur = async (e) => {\r\n//   const segmentA = await getSegments(e);\r\n\r\n//   let durationA = 0;\r\n//   await segmentA.map((e) => (durationA += e.duration));\r\n\r\n//   console.log(durationA);\r\n// };\r\n\r\nconst durationSort = async (a, b) => {\r\n  const segmentA = await getSegments(a);\r\n  const segmentB = await getSegments(b);\r\n\r\n  let durationA = 0;\r\n  await segmentA.map((e) => (durationA += e.duration));\r\n\r\n  let durationB = 0;\r\n  await segmentB.map((e) => (durationB += e.duration));\r\n\r\n  return durationA - durationB;\r\n};\r\n\r\nconst optimalSort = async (a, b) => {\r\n  const segmentA = await getSegments(a);\r\n  const segmentB = await getSegments(b);\r\n\r\n  let stopsA = 0;\r\n  await segmentA.map((e) => (stopsA += e.stops.length));\r\n\r\n  let stopsB = 0;\r\n  await segmentB.map((e) => (stopsB += e.stops.length));\r\n\r\n  return stopsA - stopsB;\r\n};\r\n\r\nconst getSegments = async (ticket) => {\r\n  let segments = [];\r\n  let segmentsAmount = ticket.segments.length;\r\n  const res = await fetch(\"json/segments.json\");\r\n  const data = await res.json();\r\n\r\n  data.map((segment) => {\r\n    let found = false;\r\n    for (let i = 0; i < segmentsAmount; i++) {\r\n      found = ticket.segments[i] == segment.id;\r\n\r\n      if (found) segments.push(segment);\r\n    }\r\n  });\r\n  return segments;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}